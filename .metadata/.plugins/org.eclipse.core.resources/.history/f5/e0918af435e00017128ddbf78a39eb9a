package mtr;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Stack;

public class Main implements Controller{
	//The FileImporter is used for reading in the comma separated
	//file and setting up the Network's structure.
	private FileImporter imp;
	//The Network object that holds the Network once created by
	//the FileImporter.
	private Network mtr;
	//The Stack that keeps track of and holds the path between
	//two Stations (for use in the Station path finding requirement)
	private Stack<Station> pathFindingRoute;
	//The number currently being used as the true/false for whether a
	//Station has been explored in this path finding iteration (used
	//instead of a boolean as allows for an O(1) reset rather than O(n)).
	private int searchNumber;
	
	public Main(){
		
		imp = new FileImporter("resources/MTRsystem_partial.csv");
		mtr = imp.getFromFile();
		pathFindingRoute = new Stack<>();
		searchNumber = 1;
	}
	
	/**
	 * Lists all termini in this MTR network.
	 * @return The name of all MTR stations that are the end point of the lines in the MTR network. 
	 */
	public String listAllTermini(){
		HashSet<String> toReturn = new HashSet<>();    
		//Iterating through all of the lines in the network and taking 
		//their first and last Stations before adding them to the 
		//termini HashSet to avoid repetition.
		for(Map.Entry<String, Line> cursor : mtr.getLines().entrySet()){
			ArrayList<Station> linesStations = cursor.getValue().getStations();
	    	Station startTermini = linesStations.get(0);
			Station endTermini = linesStations.get(linesStations.size()-1);
			toReturn.add(startTermini.getName());
			toReturn.add(endTermini.getName());
		}
		return toReturn.toString();
	}
	
	/**
	 * Lists the stations in their respective order in the specified MTR line.
	 * @param line	A specified line in the MTR network.
	 * @return A String representation of all stations in the specified MTR line.
	 */
	public String listStationsInLine(String line){		
		//Getting a Line by it's name and then iterating
		//through the Stations of that Line to form the output
		//String.
		StringBuilder toReturn = new StringBuilder();
		try{
			Line thisLine = mtr.getLines().get(line);
			ArrayList<Station> linesStations = thisLine.getStations();
			for(Station station : linesStations){
				toReturn.append("\n" + station.getName());
			}
			return toReturn.toString();
		}
		catch(NullPointerException e){
			return "Line name entered is invalid. Please try again";
		}
	}

	/**
	 * Lists the name of the line(s) that is/are directly connected with the specified MTR line.
	 * @param line A specified line in the MTR network.
	 * @return	A String representation of the name of the required line(s).
	 */
	public String listAllDirectlyConnectedLines(String line){
		//Gets the line by it's name and goes through each of it's
		//Stations looking at the Lines they belong to and adding
		//them to the HashSet to form a set of the neighbouring 
		//Stations to the one in question.
		try{
			HashSet<String> stationNames = new HashSet<String>();
		    Line thisLine =	mtr.getLines().get(line);
			ArrayList<Station> linesStations = thisLine.getStations();
			for(Station station : linesStations){
				ArrayList<Line> stationsLines = station.getLinesBelongingTo();
				for(Line aLine : stationsLines){
					if(!aLine.getName().equals(line)){
						stationNames.add(aLine.getName());
					}
				}
			}
			return stationNames.toString();
		}
		catch(NullPointerException e){
			return "Line name entered is invalid. Please try again";
		}
	}
	
	/**
	 * Lists a path between the specified stations.
	 * The path is represented as a sequence of the name of the stations between the specified stations. 
	 * @param stationA	The name of a station.
	 * @param stationB	The name of another station.
	 * @return	A String representation of a path between the specified stations.
	 */
	public String showPathBetween(String stationA, String stationB){
		//Gets the starting Station by it's name and checks to see
		//if it's a valid Station. 
		boolean found = false;
		Station firstStation = mtr.getAllStations().get(stationA);
		
		if(firstStation == null){
			return "Error : stationA not found. Please check your station name(s) and try again";
		}
		//If it is valid, then the network traversal begins. 
		//The Station is put onto the stack and marked as explored.
		pathFindingRoute.push(firstStation);
		firstStation.setExplored(searchNumber);
		
		//The possible moves from that Station are retrieved and as long
		//as there's still somewhere unexplored and the target Station
		//hasn't been found, continue searching. The route is kept track
		//of by pushing and popping to the pahtFindingRoute Stack.
		while(!found && !pathFindingRoute.isEmpty()){
			Station currentPos = pathFindingRoute.peek();
			if(currentPos.getName().equals(stationB)){
				found = true;
			}
			else{
				ArrayList<Station> neighbours = currentPos.getUnexploredNeighbouringStations(searchNumber);
				if(neighbours.isEmpty()){
					pathFindingRoute.pop();
				}
				else{
					Station nextStation = neighbours.get(0);
					pathFindingRoute.push(nextStation);
					nextStation.setExplored(searchNumber);
				}
			}
		}
		//Once it's finished, the route has either been found successfully,
		//or the route doesn't exist. The method checks to see whether the 
		//path is empty (this would mean no path).
		if(pathFindingRoute.isEmpty()){
			searchNumber++;
			return "Error: No route to stationB found. Please check your station name(s) and try again";
		}
		else{
			//Otherwise build the String that will be the route taken from
			//stationA to stationB.
			StringBuilder toReturn = new StringBuilder();
			for(Station station : pathFindingRoute){
				toReturn.append("\n" + station.getName());
		}	
		pathFindingRoute.clear();
		searchNumber++;
		return toReturn.toString();
		}
	}
	
	/**
	 * Main:
	 *  Creates a new main (runs the network), uses the TUI.
	 */
	public static void main (String[] args) {

		Main main = new Main();
		@SuppressWarnings("unused")
		TUI tui = new TUI(main);
	}

}
